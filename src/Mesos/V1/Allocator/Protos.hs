{-# LANGUAGE BangPatterns, DeriveDataTypeable, DeriveGeneric, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC  -fno-warn-unused-imports #-}
module Mesos.V1.Allocator.Protos (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified GHC.Generics as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)

protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".mesos.v1.allocator\", haskellPrefix = [MName \"Mesos\",MName \"V1\",MName \"Allocator\"], parentModule = [], baseName = MName \"Protos\"}, protoFilePath = [\"Mesos\",\"V1\",\"Allocator\",\"Protos.hs\"], protoSource = \"mesos/v1/allocator/allocator.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".mesos.v1.allocator.InverseOfferStatus\", haskellPrefix = [MName \"Mesos\",MName \"V1\",MName \"Allocator\"], parentModule = [MName \"Protos\"], baseName = MName \"InverseOfferStatus\"}, descFilePath = [\"Mesos\",\"V1\",\"Allocator\",\"Protos\",\"InverseOfferStatus.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".mesos.v1.allocator.InverseOfferStatus.status\", haskellPrefix' = [MName \"Mesos\",MName \"V1\",MName \"Allocator\"], parentModule' = [MName \"Protos\",MName \"InverseOfferStatus\"], baseName' = FName \"status\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".mesos.v1.allocator.InverseOfferStatus.Status\", haskellPrefix = [MName \"Mesos\",MName \"V1\",MName \"Allocator\"], parentModule = [MName \"Protos\",MName \"InverseOfferStatus\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".mesos.v1.allocator.InverseOfferStatus.framework_id\", haskellPrefix' = [MName \"Mesos\",MName \"V1\",MName \"Allocator\"], parentModule' = [MName \"Protos\",MName \"InverseOfferStatus\"], baseName' = FName \"framework_id\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".mesos.v1.FrameworkID\", haskellPrefix = [MName \"Mesos\",MName \"V1\"], parentModule = [MName \"Protos\"], baseName = MName \"FrameworkID\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".mesos.v1.allocator.InverseOfferStatus.timestamp\", haskellPrefix' = [MName \"Mesos\",MName \"V1\",MName \"Allocator\"], parentModule' = [MName \"Protos\",MName \"InverseOfferStatus\"], baseName' = FName \"timestamp\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".mesos.v1.TimeInfo\", haskellPrefix = [MName \"Mesos\",MName \"V1\"], parentModule = [MName \"Protos\"], baseName = MName \"TimeInfo\"}), hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".mesos.v1.allocator.InverseOfferStatus.Status\", haskellPrefix = [MName \"Mesos\",MName \"V1\",MName \"Allocator\"], parentModule = [MName \"Protos\",MName \"InverseOfferStatus\"], baseName = MName \"Status\"}, enumFilePath = [\"Mesos\",\"V1\",\"Allocator\",\"Protos\",\"InverseOfferStatus\",\"Status.hs\"], enumValues = [(EnumCode {getEnumCode = 1},\"UNKNOWN\"),(EnumCode {getEnumCode = 2},\"ACCEPT\"),(EnumCode {getEnumCode = 3},\"DECLINE\")]}], oneofs = [], knownKeyMap = fromList []}"

fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\242\STX\n\"mesos/v1/allocator/allocator.proto\DC2\DC2mesos.v1.allocator\SUB\DC4mesos/v1/mesos.proto\"\215\SOH\n\DC2InverseOfferStatus\DC2=\n\ACKstatus\CAN\SOH \STX(\SO2-.mesos.v1.allocator.InverseOfferStatus.Status\DC2+\n\fframework_id\CAN\STX \STX(\v2\NAK.mesos.v1.FrameworkID\DC2%\n\ttimestamp\CAN\ETX \STX(\v2\DC2.mesos.v1.TimeInfo\".\n\ACKStatus\DC2\v\n\aUNKNOWN\DLE\SOH\DC2\n\n\ACKACCEPT\DLE\STX\DC2\v\n\aDECLINE\DLE\ETXB@\n\GSorg.apache.mesos.v1.allocatorB\ACKProtosH\SOHP\NUL\128\SOH\NUL\136\SOH\NUL\144\SOH\NUL\160\SOH\NUL\184\SOH\NUL\216\SOH\NUL\248\SOH\NULb\ACKproto2")